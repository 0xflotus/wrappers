{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"supabase/wrappers Documentation : https://supabase.github.io/wrappers Source Code : https://github.com/supabase/wrappers Overview supabase/wrappers is a PostgreSQL extension that provides integrations with external sources so you can interact with third-party data using SQL. For example, the Stripe wrapper allows you to query and join against your Stripe customer data straight from PostgreSQL: 1 2 3 4 5 select customer_id currency from stripe . customers ; returns 1 2 3 4 customer_id | currency --------------------+----------- cus_MJiBtCqOF1Bb3F | usd (1 row) Currently supabase/wrappers supports: Integration Select Insert Update Delete Truncate Firebase Stripe","title":"Welcome"},{"location":"#supabasewrappers","text":"Documentation : https://supabase.github.io/wrappers Source Code : https://github.com/supabase/wrappers","title":"supabase/wrappers"},{"location":"#overview","text":"supabase/wrappers is a PostgreSQL extension that provides integrations with external sources so you can interact with third-party data using SQL. For example, the Stripe wrapper allows you to query and join against your Stripe customer data straight from PostgreSQL: 1 2 3 4 5 select customer_id currency from stripe . customers ; returns 1 2 3 4 customer_id | currency --------------------+----------- cus_MJiBtCqOF1Bb3F | usd (1 row) Currently supabase/wrappers supports: Integration Select Insert Update Delete Truncate Firebase Stripe","title":"Overview"},{"location":"contributing/","text":"supabase/wrappers is OSS. PRs and issues are welcome. Development Requirements: rust cargo docker-compose pgx Testing Tests are located in ./test/sql with expected output in ./test/expected To run tests locally, execute: 1 2 cd wrappers docker-compose -f .ci/docker-compose.yaml run test-wrappers Interactive PSQL Development To reduce the iteration cycle, you may want to launch a psql prompt with wrappers installed to experiment 1 2 cd wrappers cargo pgx run pg14 --features clickhouse_fdw Try out the commands below to spin up a database with the extension installed & query a table using GraphQL. Experiment with aliasing field/table names and filtering on different columns. 1 2 > create extension wrappers cascade ; CREATE EXTENSION Documentation All public API must be documented. Building documentation requires python 3.6+ Install Dependencies Install mkdocs, themes, and extensions. 1 pip install -r docs/requirements_docs.txt Serving To serve the documentation locally run 1 mkdocs serve and visit the docs at http://127.0.0.1:8000/wrappers/ Deploying If you have write access to the repo, docs can be updated using 1 mkdocs gh-deploy","title":"Contributing"},{"location":"contributing/#development","text":"Requirements: rust cargo docker-compose pgx","title":"Development"},{"location":"contributing/#testing","text":"Tests are located in ./test/sql with expected output in ./test/expected To run tests locally, execute: 1 2 cd wrappers docker-compose -f .ci/docker-compose.yaml run test-wrappers","title":"Testing"},{"location":"contributing/#interactive-psql-development","text":"To reduce the iteration cycle, you may want to launch a psql prompt with wrappers installed to experiment 1 2 cd wrappers cargo pgx run pg14 --features clickhouse_fdw Try out the commands below to spin up a database with the extension installed & query a table using GraphQL. Experiment with aliasing field/table names and filtering on different columns. 1 2 > create extension wrappers cascade ; CREATE EXTENSION","title":"Interactive PSQL Development"},{"location":"contributing/#documentation","text":"All public API must be documented. Building documentation requires python 3.6+","title":"Documentation"},{"location":"contributing/#install-dependencies","text":"Install mkdocs, themes, and extensions. 1 pip install -r docs/requirements_docs.txt","title":"Install Dependencies"},{"location":"contributing/#serving","text":"To serve the documentation locally run 1 mkdocs serve and visit the docs at http://127.0.0.1:8000/wrappers/","title":"Serving"},{"location":"contributing/#deploying","text":"If you have write access to the repo, docs can be updated using 1 mkdocs gh-deploy","title":"Deploying"},{"location":"firebase/","text":"Firebase is an app development platform built around non-relational technologies. The Firebase wrapper supports connecting to the auth/users collection and any Firestore collection . Wrapper To get started with the Firebase wrapper, create a foreign data wrapper specifying FirebaseFdw as the wrapper key of the options section. 1 2 3 4 5 6 7 8 create extension if not exists wrappers ; create foreign data wrapper firebase_wrapper handler wrappers_handler validator wrappers_validator options ( wrapper 'FirebaseFdw' ); Server Next, we need to create a server for the FDW to hold options and credentials. Auth (Supabase) If you are using the Supabase platform, this is the recommended approach for securing your Firebase service account credentials. Create a secure key using pgsodium 1 select pgsodium . create_key ( name : = 'firebase' ); Save your Firebase service account key in Vault and retrieve the key_id 1 2 3 4 5 6 7 8 9 10 11 12 13 insert into vault . secrets ( secret , key_id ) values ( '{ \"type\": \"service_account\", \"project_id\": \"your_gcp_project_id\", ... }' , ( select id from pgsodium . valid_key where name = 'firebase' ) ); returning key_id ; Create the foreign server 1 2 3 4 5 6 create server firebase_server foreign data wrapper firebase_wrapper options ( sa_key_id '<your key_id from above>' project_id '<firebase_project_id>' ); Auth (Insecure) If the platform you are using does not support pgsodium and Vault , you can create a server by storing yourt service account key directly. Important Credentials stored using this method can be viewed as plain text by anyone with access to pg_catalog.pg_foreign_server 1 2 3 4 5 6 7 8 9 10 11 12 create server firebase_server foreign data wrapper firebase_wrapper options ( sa_key ' { \"type\": \"service_account\", \"project_id\": \"your_gcp_project_id\", ... } ' , project_id 'firebase_project_id' , ); Tables Firebase collections are non-relational/documents. With the exception of metadata fields, all returned data are availble as a fields jsonb column. Firestore To map a Firestore collection provide its location using the format firestore/<collection_id> as the object option as shown below. 1 2 3 4 5 6 7 8 9 10 create foreign table firebase_docs ( name text , fields jsonb , create_time timestamp , update_time timestamp ) server my_firebase_server options ( object 'firestore/user-profiles' -- format: 'firestore/[collection_id]' ); Note that name , create_time , and update_time , are automatic metadata fields on all Firestore collections. auth/users The auth/users collection is a special case with unique metadata. The following shows how to map Firebase users to PostgreSQL table. 1 2 3 4 5 6 7 8 9 10 create foreign table firebase_users ( uid text , email text , created_at timestamp , fields jsonb ) server my_firebase_server options ( object 'auth/users' );","title":"Firebase"},{"location":"firebase/#wrapper","text":"To get started with the Firebase wrapper, create a foreign data wrapper specifying FirebaseFdw as the wrapper key of the options section. 1 2 3 4 5 6 7 8 create extension if not exists wrappers ; create foreign data wrapper firebase_wrapper handler wrappers_handler validator wrappers_validator options ( wrapper 'FirebaseFdw' );","title":"Wrapper"},{"location":"firebase/#server","text":"Next, we need to create a server for the FDW to hold options and credentials.","title":"Server"},{"location":"firebase/#auth-supabase","text":"If you are using the Supabase platform, this is the recommended approach for securing your Firebase service account credentials. Create a secure key using pgsodium 1 select pgsodium . create_key ( name : = 'firebase' ); Save your Firebase service account key in Vault and retrieve the key_id 1 2 3 4 5 6 7 8 9 10 11 12 13 insert into vault . secrets ( secret , key_id ) values ( '{ \"type\": \"service_account\", \"project_id\": \"your_gcp_project_id\", ... }' , ( select id from pgsodium . valid_key where name = 'firebase' ) ); returning key_id ; Create the foreign server 1 2 3 4 5 6 create server firebase_server foreign data wrapper firebase_wrapper options ( sa_key_id '<your key_id from above>' project_id '<firebase_project_id>' );","title":"Auth (Supabase)"},{"location":"firebase/#auth-insecure","text":"If the platform you are using does not support pgsodium and Vault , you can create a server by storing yourt service account key directly. Important Credentials stored using this method can be viewed as plain text by anyone with access to pg_catalog.pg_foreign_server 1 2 3 4 5 6 7 8 9 10 11 12 create server firebase_server foreign data wrapper firebase_wrapper options ( sa_key ' { \"type\": \"service_account\", \"project_id\": \"your_gcp_project_id\", ... } ' , project_id 'firebase_project_id' , );","title":"Auth (Insecure)"},{"location":"firebase/#tables","text":"Firebase collections are non-relational/documents. With the exception of metadata fields, all returned data are availble as a fields jsonb column.","title":"Tables"},{"location":"firebase/#firestore","text":"To map a Firestore collection provide its location using the format firestore/<collection_id> as the object option as shown below. 1 2 3 4 5 6 7 8 9 10 create foreign table firebase_docs ( name text , fields jsonb , create_time timestamp , update_time timestamp ) server my_firebase_server options ( object 'firestore/user-profiles' -- format: 'firestore/[collection_id]' ); Note that name , create_time , and update_time , are automatic metadata fields on all Firestore collections.","title":"Firestore"},{"location":"firebase/#authusers","text":"The auth/users collection is a special case with unique metadata. The following shows how to map Firebase users to PostgreSQL table. 1 2 3 4 5 6 7 8 9 10 create foreign table firebase_users ( uid text , email text , created_at timestamp , fields jsonb ) server my_firebase_server options ( object 'auth/users' );","title":"auth/users"},{"location":"installation/","text":"First, install pgx Then clone the repo and install using 1 2 3 git clone https://github.com/supabase/wrappers.git cd wrappers/wrappers cargo pgx install --no-default-features --features pg14,<some_integration>_fdw --release To enable the extension in PostgreSQL we must execute a create extension statement. 1 create extension wrappers ;","title":"Installation"},{"location":"stripe/","text":"Stripe is an API driven online payment processing utilty. supabase/wrappers exposes the balance , customers , and subscriptions , endpoints. Wrapper To get started with the Stripe wrapper, create a foreign data wrapper specifying the StripeFdw as the wrapper key of the options section. 1 2 3 4 5 6 7 8 create extension if not exists wrappers ; create foreign data wrapper stripe_wrapper handler wrappers_handler validator wrappers_validator options ( wrapper 'StripeFdw' ); Server Next, we need to create a server for the FDW to hold options and credentials. Auth (Supabase) If you are using the Supabase platform, this is the recommended approach for securing your Stripe API key . Create a secure key using pgsodium 1 select pgsodium . create_key ( name : = 'stripe' ); Save your Stripe API key in Vault and retrieve the key_id 1 2 3 4 5 6 7 insert into vault . secrets ( secret , key_id ) values ( 'sk_test_xxx' , ( select id from pgsodium . valid_key where name = 'stripe' ) ) returning key_id ; Create the foreign server 1 2 3 4 5 create server stripe_server foreign data wrapper stripe_wrapper options ( api_key_id '<your key_id from above>' ); Auth (Insecure) If the platform you are using does not support pgsodium and Vault you can create a server by storing your Stripe API key directly. Important Credentials stored using this method can be viewed as plain text by anyone with access to pg_catalog.pg_foreign_server 1 2 3 4 5 create server stripe_server foreign data wrapper stripe_wrapper options ( api_key 'sk_test_xxx' ); Tables The Stripe tables mirror Stripe's API. (Optional) Create a schema to hold the Stripe tables. 1 create schema stripe ; Balance read only Shows the balance currently on your Stripe account. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 create foreign table stripe . balance ( balance_type text , amount bigint , currency text , attrs jsonb ) server stripe_server options ( object 'balance' ); Balance Transactions read only Balance transactions represent funds moving through your Stripe account. They're created for every type of transaction that comes into or flows out of your Stripe account balance. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 create foreign table stripe . balance_transactions ( id text , amount bigint , currency text , description text , fee bigint , net bigint , status text , type text , created timestamp , attrs jsonb ) server stripe_server options ( object 'balance_transactions' ); While any column is allowed in a where clause, it is most efficient to filter by: id type Charges read only To charge a credit or a debit card, you create a Charge object. You can retrieve and refund individual charges as well as list all charges. Charges are identified by a unique, random ID. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 create foreign table stripe . charges ( id text , amount bigint , currency text , customer text , description text , invoice text , payment_intent text , status text , created timestamp , attrs jsonb ) server stripe_server options ( object 'charges' ); While any column is allowed in a where clause, it is most efficient to filter by: id customer Customers read and modify Contains customers known to Stripe. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 create foreign table stripe . customers ( id text , email text , name text , description text , created timestamp , attrs jsonb ) server my_stripe_server options ( object 'customers' ); Invoices read only Invoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 create foreign table stripe . invoices ( id text , customer text , subscription text , status text , total bigint , currency text , period_start timestamp , period_end timestamp , attrs jsonb ) server stripe_server options ( object 'invoices' ); While any column is allowed in a where clause, it is most efficient to filter by: id customer status subscription Payment Intents read only A payment intent guides you through the process of collecting a payment from your customer. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 create foreign table stripe . payment_intents ( id text , customer text , amount bigint , currency text , payment_method text , created timestamp , attrs jsonb ) server my_stripe_server options ( object 'payment_intents' rowid_column 'id' ); While any column is allowed in a where clause, it is most efficient to filter by: id customer Products read and modify All products available in Stripe. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 create foreign table stripe . products ( id text , name text , active bool , default_price text , description text , created timestamp , updated timestamp , attrs jsonb ) server my_stripe_server options ( object 'products' , rowid_column 'id' ); While any column is allowed in a where clause, it is most efficient to filter by: id active Subscriptions read and modify Customer recurring payment schedules. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 13 create foreign table stripe . subscriptions ( id text , customer text , currency text , current_period_start timestamp , current_period_end timestamp , attrs jsonb ) server my_stripe_server options ( object 'subscriptions' rowid_column 'id' ); While any column is allowed in a where clause, it is most efficient to filter by: id customer price status","title":"Stripe"},{"location":"stripe/#wrapper","text":"To get started with the Stripe wrapper, create a foreign data wrapper specifying the StripeFdw as the wrapper key of the options section. 1 2 3 4 5 6 7 8 create extension if not exists wrappers ; create foreign data wrapper stripe_wrapper handler wrappers_handler validator wrappers_validator options ( wrapper 'StripeFdw' );","title":"Wrapper"},{"location":"stripe/#server","text":"Next, we need to create a server for the FDW to hold options and credentials.","title":"Server"},{"location":"stripe/#auth-supabase","text":"If you are using the Supabase platform, this is the recommended approach for securing your Stripe API key . Create a secure key using pgsodium 1 select pgsodium . create_key ( name : = 'stripe' ); Save your Stripe API key in Vault and retrieve the key_id 1 2 3 4 5 6 7 insert into vault . secrets ( secret , key_id ) values ( 'sk_test_xxx' , ( select id from pgsodium . valid_key where name = 'stripe' ) ) returning key_id ; Create the foreign server 1 2 3 4 5 create server stripe_server foreign data wrapper stripe_wrapper options ( api_key_id '<your key_id from above>' );","title":"Auth (Supabase)"},{"location":"stripe/#auth-insecure","text":"If the platform you are using does not support pgsodium and Vault you can create a server by storing your Stripe API key directly. Important Credentials stored using this method can be viewed as plain text by anyone with access to pg_catalog.pg_foreign_server 1 2 3 4 5 create server stripe_server foreign data wrapper stripe_wrapper options ( api_key 'sk_test_xxx' );","title":"Auth (Insecure)"},{"location":"stripe/#tables","text":"The Stripe tables mirror Stripe's API. (Optional) Create a schema to hold the Stripe tables. 1 create schema stripe ;","title":"Tables"},{"location":"stripe/#balance","text":"read only Shows the balance currently on your Stripe account. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 create foreign table stripe . balance ( balance_type text , amount bigint , currency text , attrs jsonb ) server stripe_server options ( object 'balance' );","title":"Balance"},{"location":"stripe/#balance-transactions","text":"read only Balance transactions represent funds moving through your Stripe account. They're created for every type of transaction that comes into or flows out of your Stripe account balance. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 create foreign table stripe . balance_transactions ( id text , amount bigint , currency text , description text , fee bigint , net bigint , status text , type text , created timestamp , attrs jsonb ) server stripe_server options ( object 'balance_transactions' ); While any column is allowed in a where clause, it is most efficient to filter by: id type","title":"Balance Transactions"},{"location":"stripe/#charges","text":"read only To charge a credit or a debit card, you create a Charge object. You can retrieve and refund individual charges as well as list all charges. Charges are identified by a unique, random ID. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 create foreign table stripe . charges ( id text , amount bigint , currency text , customer text , description text , invoice text , payment_intent text , status text , created timestamp , attrs jsonb ) server stripe_server options ( object 'charges' ); While any column is allowed in a where clause, it is most efficient to filter by: id customer","title":"Charges"},{"location":"stripe/#customers","text":"read and modify Contains customers known to Stripe. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 create foreign table stripe . customers ( id text , email text , name text , description text , created timestamp , attrs jsonb ) server my_stripe_server options ( object 'customers' );","title":"Customers"},{"location":"stripe/#invoices","text":"read only Invoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 create foreign table stripe . invoices ( id text , customer text , subscription text , status text , total bigint , currency text , period_start timestamp , period_end timestamp , attrs jsonb ) server stripe_server options ( object 'invoices' ); While any column is allowed in a where clause, it is most efficient to filter by: id customer status subscription","title":"Invoices"},{"location":"stripe/#payment-intents","text":"read only A payment intent guides you through the process of collecting a payment from your customer. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 create foreign table stripe . payment_intents ( id text , customer text , amount bigint , currency text , payment_method text , created timestamp , attrs jsonb ) server my_stripe_server options ( object 'payment_intents' rowid_column 'id' ); While any column is allowed in a where clause, it is most efficient to filter by: id customer","title":"Payment Intents"},{"location":"stripe/#products","text":"read and modify All products available in Stripe. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 create foreign table stripe . products ( id text , name text , active bool , default_price text , description text , created timestamp , updated timestamp , attrs jsonb ) server my_stripe_server options ( object 'products' , rowid_column 'id' ); While any column is allowed in a where clause, it is most efficient to filter by: id active","title":"Products"},{"location":"stripe/#subscriptions","text":"read and modify Customer recurring payment schedules. Ref: Stripe docs 1 2 3 4 5 6 7 8 9 10 11 12 13 create foreign table stripe . subscriptions ( id text , customer text , currency text , current_period_start timestamp , current_period_end timestamp , attrs jsonb ) server my_stripe_server options ( object 'subscriptions' rowid_column 'id' ); While any column is allowed in a where clause, it is most efficient to filter by: id customer price status","title":"Subscriptions"}]}